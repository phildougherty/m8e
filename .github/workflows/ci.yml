---
name: CI/CD Pipeline

on:
  push:
    branches: [main, feature/*, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  GO_VERSION: "1.24"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.23", "1.24"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests with coverage
        run: |
          mkdir -p coverage
          # Exclude integration tests from unit test coverage
          go test -v -race -coverprofile=coverage/coverage.out -covermode=atomic -json $(go list ./... | grep -v '/internal/integration') | tee coverage/test-results.json
          go tool cover -html=coverage/coverage.out -o coverage/coverage.html
          
          # Generate test summary
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Status | Tests | Time |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|-------|------|" >> $GITHUB_STEP_SUMMARY
          jq -r 'select(.Action=="pass" or .Action=="fail") | select(.Package) | "\(.Package) | \(if .Action=="pass" then "✅ PASS" else "❌ FAIL" end) | \(.Test // "N/A") | \(.Elapsed // 0)s"' coverage/test-results.json >> $GITHUB_STEP_SUMMARY

      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage/coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: ${COVERAGE}%"
          
          # Add coverage to GitHub summary
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "**Total Coverage: ${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if (( $(echo "$COVERAGE >= 70" | bc -l) )); then
            echo "✅ Excellent coverage (≥70%)" >> $GITHUB_STEP_SUMMARY
          elif (( $(echo "$COVERAGE >= 9.5" | bc -l) )); then
            echo "⚠️ Coverage needs improvement (≥9.5%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Coverage below minimum threshold of 9.5%" >> $GITHUB_STEP_SUMMARY
            echo "Coverage $COVERAGE% is below minimum threshold of 9.5%"
            exit 1
          fi

      - name: Upload coverage reports
        if: matrix.go-version == '1.24'
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/coverage.out
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        if: matrix.go-version == '1.24'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/

  lint:
    name: Lint & Security
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=10m --verbose

      - name: Run gosec Security Scanner
        run: |
          go install github.com/securecodewarrior/gosec/cmd/gosec@latest
          gosec -fmt sarif -out gosec.sarif ./...

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif

      - name: Dependency vulnerability scan
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p dist
          BINARY_NAME=matey
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
          LDFLAGS="-ldflags \"-X main.version=${VERSION} -X main.commit=${COMMIT}\""
          
          go build ${LDFLAGS} -o dist/${BINARY_NAME}-${{ matrix.os }}-${{ matrix.arch }} ./cmd/matey

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: matey-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  helm-test:
    name: Helm Chart Test
    runs-on: ubuntu-latest
    needs: [docker]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.16.1

      - name: Set up Kubernetes in Docker (kind)
        uses: helm/kind-action@v1
        with:
          version: v0.24.0
          kubectl_version: v1.31.0

      - name: Lint Helm chart
        run: |
          helm lint charts/matey/

      - name: Test Helm chart installation
        run: |
          # Install the chart in dry-run mode
          helm install matey charts/matey/ --dry-run --debug
          
          # Test template rendering
          helm template matey charts/matey/ > rendered-templates.yaml
          
          # Validate Kubernetes manifests
          kubectl apply --dry-run=client -f rendered-templates.yaml

      - name: Upload Helm artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helm-templates
          path: rendered-templates.yaml

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Kubernetes in Docker (kind)
        uses: helm/kind-action@v1
        with:
          version: v0.24.0
          kubectl_version: v1.31.0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: matey-linux-amd64
          path: build/

      - name: Make binary executable
        run: |
          chmod +x build/matey-linux-amd64
          ln -s matey-linux-amd64 build/matey

      - name: Run integration tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          MCP_API_KEY: test-integration-key
          KUBECONFIG: /home/runner/.kube/config
        run: |
          export PATH=$PWD/build:$PATH
          
          echo "Testing version command..."
          ./build/matey --version

          echo "Testing config validation..."
          ./build/matey validate matey-quickstart.yaml

          echo "Testing basic config validation..."
          ./build/matey validate matey-basic.yaml

          echo "Installing CRDs..."
          ./build/matey install --dry-run

          echo "Running integration test suite..."
          go test -v -json ./internal/integration/... | tee integration-results.json
          
          # Generate integration test summary
          echo "## Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          jq -r 'select(.Action=="pass" or .Action=="fail") | select(.Test) | "\(.Test) | \(if .Action=="pass" then "✅ PASS" else "❌ FAIL" end) | \(.Elapsed // 0)s"' integration-results.json >> $GITHUB_STEP_SUMMARY

          echo "Integration tests completed successfully"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: matey-linux-amd64
          path: build/

      - name: Make binary executable
        run: |
          chmod +x build/matey-linux-amd64
          ln -s matey-linux-amd64 build/matey

      - name: Run performance benchmarks
        run: |
          mkdir -p benchmarks
          
          echo "Running Go benchmarks..."
          if grep -r "^func Benchmark" ./internal/; then
            go test -bench=. -benchmem -benchtime=10s ./internal/protocol/ | tee benchmarks/protocol.txt
            go test -bench=. -benchmem -benchtime=10s ./internal/server/ | tee benchmarks/server.txt
            go test -bench=. -benchmem -benchtime=10s ./internal/config/ | tee benchmarks/config.txt
            go test -bench=. -benchmem -benchtime=10s ./internal/discovery/ | tee benchmarks/discovery.txt
          else
            echo "No benchmark tests found - creating baseline benchmark"
            echo "BenchmarkBaseline 1000000 1000 ns/op" > benchmarks/baseline.txt
          fi

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmarks/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, build, docker, helm-test, integration, performance]
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release
          
          # Organize binaries
          for dir in artifacts/matey-*/; do
            if [ -d "$dir" ]; then
              os_arch=$(basename "$dir" | sed 's/^matey-//')
              binary_name="matey"
              if [[ "$os_arch" == *"windows"* ]]; then
                binary_name="matey.exe"
              fi
              
              # Find the binary file
              binary_file=$(find "$dir" -name "matey*" -type f | head -1)
              if [ -n "$binary_file" ]; then
                tar -czf "release/matey-${os_arch}.tar.gz" -C "$(dirname "$binary_file")" "$(basename "$binary_file")"
                
                # Create checksum
                cd release
                sha256sum "matey-${os_arch}.tar.gz" >> checksums.txt
                cd ..
              fi
            fi
          done

      - name: Generate release notes
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          cat > release_notes.md << EOF
          # Matey ${TAG_NAME}
          
          ## What's Changed
          
          This release includes the latest improvements and bug fixes for Matey, the Kubernetes-native MCP server orchestrator.
          
          ## Installation
          
          ### Binary Installation
          
          Download the appropriate binary for your platform from the assets below.
          
          ### Docker Installation
          
          \`\`\`bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG_NAME}
          \`\`\`
          
          ### Kubernetes Installation
          
          \`\`\`bash
          # Install CRDs and controllers
          ./matey install
          \`\`\`
          
          ## Verification
          
          All binaries are signed and checksums are provided in \`checksums.txt\`.
          
          \`\`\`bash
          # Verify checksum
          sha256sum -c checksums.txt
          \`\`\`
          EOF

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          # Upload all release assets
          for file in release/*; do
            gh release upload "$TAG_NAME" "$file" --clobber
          done
          
          # Update release notes
          gh release edit "$TAG_NAME" --notes-file release_notes.md