name: CI/CD Pipeline

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: 1.19

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.19, 1.20, 1.21]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.19'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Build binary
      run: make build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mcp-compose-binary
        path: build/mcp-compose

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: ./...

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker build -f Dockerfile.proxy -t mcp-compose-proxy:latest .
        docker build -f Dockerfile.stdio-bridge -t mcp-compose-stdio-bridge:latest .
    
    - name: Test Docker images
      run: |
        docker run --rm mcp-compose-proxy:latest --version || true
        docker run --rm mcp-compose-stdio-bridge:latest --version || true

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: mcp-compose-binary
        path: build/
    
    - name: Make binary executable
      run: chmod +x build/mcp-compose
    
    - name: Run integration tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: test_db
      run: |
        # Test basic functionality
        ./build/mcp-compose --version
        ./build/mcp-compose validate mcp-compose-quickstart.yaml
        
        # Test with PostgreSQL
        timeout 30s ./build/mcp-compose up --config mcp-compose-basic.yaml || true
        ./build/mcp-compose down --config mcp-compose-basic.yaml || true

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: mcp-compose-binary
        path: build/
    
    - name: Make binary executable
      run: chmod +x build/mcp-compose
    
    - name: Run performance benchmarks
      run: |
        go test -bench=. -benchmem ./internal/protocol/
        go test -bench=. -benchmem ./internal/server/
        go test -bench=. -benchmem ./internal/config/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, build, security, docker, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: mcp-compose-binary
        path: build/
    
    - name: Create release
      if: contains(github.event.head_commit.message, '[release]')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Generate release notes
        VERSION=$(date +%Y.%m.%d)
        echo "Creating release version $VERSION"
        
        # Create GitHub release
        gh release create "v$VERSION" \
          --title "Release v$VERSION" \
          --notes "Automated release from CI/CD pipeline" \
          build/mcp-compose